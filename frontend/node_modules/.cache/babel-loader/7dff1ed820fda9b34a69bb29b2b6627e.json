{"ast":null,"code":"import API from '../../API';\nimport { fetchPostsAction, addPostAction, deletePostAction, fetchPostDetailAction } from './actions';\nconst api = new API();\nexport const fetchPosts = () => {\n  return async dispatch => {\n    return api.getPosts().then(posts => {\n      dispatch(fetchPostsAction(posts));\n    }).catch(error => {\n      console.log('er', error);\n      alert('Failed to connect API: /posts/');\n    });\n  };\n};\nexport const fetchPostDetail = id => {\n  return async dispatch => {\n    return api.getPost(id).then(post => {\n      dispatch(fetchPostDetailAction(post));\n    }).catch(error => {\n      console.log('er', error);\n      alert('Failed to connect API: /post/');\n    });\n  };\n};\nexport const deletePost = id => {\n  return async (dispatch, getState) => {\n    return api.deletePost(id).then(response => {\n      const prevPosts = getState().posts.list;\n      const nextPosts = prevPosts.filter(post => post.id !== id);\n      dispatch(deletePostAction(nextPosts));\n    }).catch(error => {\n      alert('Failed to connect API to delete a post');\n      console.log(error);\n    });\n  };\n};\nexport const addPost = (name, image) => {\n  return async dispatch => {\n    // Validation\n    if (name === '' || image === '') {\n      alert('Please fill out name and body.');\n      return false;\n    }\n\n    console.log(\"imageeeeeeee\", image);\n    return api.addPost(name, image).then(post => {\n      //const prevPosts = getState().posts.list;\n      //const nextPosts = [post, ...prevPosts];\n      dispatch(addPostAction(post));\n    }).catch(error => {\n      alert('Failed to connect API to add a post');\n      console.log(error);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/musubimanagement/Desktop/Seiart/frontend/src/reducks/posts/operations.js"],"names":["API","fetchPostsAction","addPostAction","deletePostAction","fetchPostDetailAction","api","fetchPosts","dispatch","getPosts","then","posts","catch","error","console","log","alert","fetchPostDetail","id","getPost","post","deletePost","getState","response","prevPosts","list","nextPosts","filter","addPost","name","image"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,WAAhB;AACA,SAASC,gBAAT,EAA2BC,aAA3B,EAA0CC,gBAA1C,EAA4DC,qBAA5D,QAAyF,WAAzF;AAEA,MAAMC,GAAG,GAAG,IAAIL,GAAJ,EAAZ;AAEA,OAAO,MAAMM,UAAU,GAAG,MAAM;AAC5B,SAAO,MAAMC,QAAN,IAAkB;AACrB,WAAOF,GAAG,CACLG,QADE,GAEFC,IAFE,CAEGC,KAAK,IAAI;AACXH,MAAAA,QAAQ,CAACN,gBAAgB,CAACS,KAAD,CAAjB,CAAR;AACH,KAJE,EAKFC,KALE,CAKIC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,KAAlB;AACAG,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACH,KARE,CAAP;AASH,GAVD;AAWH,CAZM;AAaP,OAAO,MAAMC,eAAe,GAAGC,EAAE,IAAI;AACjC,SAAO,MAAMV,QAAN,IAAkB;AACrB,WAAOF,GAAG,CACLa,OADE,CACMD,EADN,EAEFR,IAFE,CAEGU,IAAI,IAAI;AACVZ,MAAAA,QAAQ,CAACH,qBAAqB,CAACe,IAAD,CAAtB,CAAR;AACH,KAJE,EAKFR,KALE,CAKIC,KAAK,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,KAAlB;AACAG,MAAAA,KAAK,CAAC,+BAAD,CAAL;AACH,KARE,CAAP;AASH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMK,UAAU,GAAGH,EAAE,IAAI;AAC5B,SAAO,OAAOV,QAAP,EAAiBc,QAAjB,KAA8B;AACjC,WAAOhB,GAAG,CACLe,UADE,CACSH,EADT,EAEFR,IAFE,CAEGa,QAAQ,IAAI;AACd,YAAMC,SAAS,GAAGF,QAAQ,GAAGX,KAAX,CAAiBc,IAAnC;AACA,YAAMC,SAAS,GAAGF,SAAS,CAACG,MAAV,CAAiBP,IAAI,IAAIA,IAAI,CAACF,EAAL,KAAYA,EAArC,CAAlB;AACAV,MAAAA,QAAQ,CAACJ,gBAAgB,CAACsB,SAAD,CAAjB,CAAR;AACH,KANE,EAOFd,KAPE,CAOIC,KAAK,IAAI;AACZG,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAVE,CAAP;AAWH,GAZD;AAaH,CAdM;AAgBP,OAAO,MAAMe,OAAO,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,SAAO,MAAOtB,QAAP,IAAoB;AACvB;AACA,QAAIqB,IAAI,KAAK,EAAT,IAAeC,KAAK,KAAK,EAA7B,EAAiC;AAC7Bd,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACA,aAAO,KAAP;AACH;;AACDF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Be,KAA5B;AACA,WAAOxB,GAAG,CACLsB,OADE,CACMC,IADN,EACYC,KADZ,EAEFpB,IAFE,CAEGU,IAAI,IAAI;AACV;AACA;AACAZ,MAAAA,QAAQ,CAACL,aAAa,CAACiB,IAAD,CAAd,CAAR;AACH,KANE,EAOFR,KAPE,CAOIC,KAAK,IAAI;AACZG,MAAAA,KAAK,CAAC,qCAAD,CAAL;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAVE,CAAP;AAWH,GAlBD;AAmBH,CApBM","sourcesContent":["import API from '../../API';\nimport { fetchPostsAction, addPostAction, deletePostAction, fetchPostDetailAction } from './actions';\n\nconst api = new API();\n\nexport const fetchPosts = () => {\n    return async dispatch => {\n        return api\n            .getPosts()\n            .then(posts => {\n                dispatch(fetchPostsAction(posts));\n            })\n            .catch(error => {\n                console.log('er', error);\n                alert('Failed to connect API: /posts/');\n            });\n    };\n};\nexport const fetchPostDetail = id => {\n    return async dispatch => {\n        return api\n            .getPost(id)\n            .then(post => {\n                dispatch(fetchPostDetailAction(post));\n            })\n            .catch(error => {\n                console.log('er', error);\n                alert('Failed to connect API: /post/');\n            });\n    };\n};\n\nexport const deletePost = id => {\n    return async (dispatch, getState) => {\n        return api\n            .deletePost(id)\n            .then(response => {\n                const prevPosts = getState().posts.list;\n                const nextPosts = prevPosts.filter(post => post.id !== id);\n                dispatch(deletePostAction(nextPosts));\n            })\n            .catch(error => {\n                alert('Failed to connect API to delete a post');\n                console.log(error);\n            });\n    };\n};\n\nexport const addPost = (name, image) => {\n    return async (dispatch) => {\n        // Validation\n        if (name === '' || image === '') {\n            alert('Please fill out name and body.');\n            return false;\n        }\n        console.log(\"imageeeeeeee\", image);\n        return api\n            .addPost(name, image)\n            .then(post => {\n                //const prevPosts = getState().posts.list;\n                //const nextPosts = [post, ...prevPosts];\n                dispatch(addPostAction(post));\n            })\n            .catch(error => {\n                alert('Failed to connect API to add a post');\n                console.log(error);\n            });\n    };\n};\n"]},"metadata":{},"sourceType":"module"}