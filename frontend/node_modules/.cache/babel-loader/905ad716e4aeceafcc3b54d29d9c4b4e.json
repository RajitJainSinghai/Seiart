{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\nvar baseURL; // if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\n\nbaseURL = 'http://127.0.0.1:8000/';\nconst api = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\n\napi.interceptors.request.use(config => {\n  if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n    config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n  }\n\n  return config;\n}, err => {\n  console.error(err);\n});\nexport default class API {\n  constructor() {\n    this.getProfile = async () => {\n      return api.get('users/profile', {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        alert('error users/profile');\n      });\n    };\n\n    this.signUp = async (user_name, email, password) => {\n      const savedPost = await api.post('/users/signup/', {\n        user_name: user_name,\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.signIn = async (email, password) => {\n      const savedPost = await api.post('/users/signin/', {\n        email: email,\n        password: password\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.getUsers = async () => {\n      const posts = await api.get('/users/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.updateProfile = async (updateProfileBody, id) => {\n      const formData = new FormData();\n\n      for (const key in updateProfileBody) {\n        formData.append(key, updateProfileBody[key]);\n      }\n\n      return api.put(`/users/update/${id}/`, formData, {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.getPosts = async () => {\n      const posts = await api.get('/posts/').then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return posts;\n    };\n\n    this.getPost = async id => {\n      return api.get(`/posts/detail/${id}/`, {\n        requireToken: true\n      }).then(response => {\n        return response.data[0];\n      }).catch(error => {\n        throw new Error(error);\n      });\n    };\n\n    this.addPost = async (name, image) => {\n      const formData = new FormData();\n      formData.append('name', name);\n      formData.append('image', image);\n      console.log('{ name, image }', {\n        name,\n        image\n      });\n      const savedPost = await api.post('/posts/add/', formData, {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.deletePost = async id => {\n      const response = await api.delete('/posts/delete/' + id + '/', {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return response;\n    };\n\n    this.getFavorites = async () => {\n      const favorites = await api.get('/favorites/', {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return favorites;\n    };\n\n    this.addFavorites = async addFavoriteBody => {\n      //{homeId: homeId} = {homeId}\n      const savedPost = await api.post('/favorites/add/', addFavoriteBody, {\n        requireToken: true\n      }).then(response => {\n        return response.data;\n      }).catch(error => {\n        throw new Error(error);\n      });\n      return savedPost;\n    };\n\n    this.deleteFavorites = id => {\n      return api.delete(`favorites/delete/${id}`, {\n        requireToken: true\n      });\n    };\n  } //     ///////////////////////////////////////////\n  //     //Comment\n  //     //////////////////////////////////////////\n  //     getComments = (query = {}) => {\n  //         return api.get('/comments', { params: query, requireToken: true });\n  //     };\n  //     getComments = async () => {\n  //         const comments = await api\n  //             .get('/comments/')\n  //             .then(response => {\n  //                 return response.data;\n  //             })\n  //             .catch(error => {\n  //                 throw new Error(error);\n  //             });\n  //         return comments;\n  //     };\n  //     addComments = async addCommentBody => {\n  //         const savedPost = await api\n  //             .post('/comments/add/', addCommentBody, { requireToken: true })\n  //             .then(response => {\n  //                 return response.data;\n  //             })\n  //             .catch(error => {\n  //                 throw new Error(error);\n  //             });\n  //         return savedPost;\n  //     };\n  //     deleteComments = id => {\n  //         return api.delete(`comments/delete/${id}`, { requireToken: true });\n  //     };\n\n\n}","map":{"version":3,"sources":["/Users/musubimanagement/Desktop/Seiart/frontend/src/API.js"],"names":["axios","LOGIN_USER_KEY","baseURL","api","create","headers","interceptors","request","use","config","requireToken","localStorage","getItem","common","JSON","parse","token","err","console","error","API","getProfile","get","then","response","data","catch","alert","signUp","user_name","email","password","savedPost","post","Error","signIn","getUsers","posts","updateProfile","updateProfileBody","id","formData","FormData","key","append","put","getPosts","getPost","addPost","name","image","log","deletePost","delete","getFavorites","favorites","addFavorites","addFavoriteBody","deleteFavorites"],"mappings":"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","sourcesContent":["import axios from 'axios';\nexport const LOGIN_USER_KEY = 'WD_FORUM_LOGIN_USER_KEY';\n\nvar baseURL;\n// if (process.env.REACT_APP_ENVIRONMENT && process.env.REACT_APP_ENVIRONMENT === 'PRODUCTION') {\n//     baseURL = process.env.REACT_APP_API_BASE_URL;\n// } else {\n//     baseURL = 'http://127.0.0.1:8000';\n// }\nbaseURL = 'http://127.0.0.1:8000/';\nconst api = axios.create({\n    baseURL: baseURL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n/**\n * Add requireToken: true in request config, for API that required Authorization token\n */\napi.interceptors.request.use(\n    config => {\n        if (config.requireToken && localStorage.getItem(LOGIN_USER_KEY)) {\n            config.headers.common['Authorization'] = JSON.parse(localStorage.getItem(LOGIN_USER_KEY)).token;\n        }\n\n        return config;\n    },\n    err => {\n        console.error(err);\n    }\n);\n\nexport default class API {\n    //////////////////////////////\n    // USERS\n    /////////////////////////////\n\n    getProfile = async () => {\n        return api\n            .get('users/profile', {\n                requireToken: true\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                alert('error users/profile');\n            });\n    };\n\n    signUp = async (user_name, email, password) => {\n        const savedPost = await api\n            .post('/users/signup/', {\n                user_name: user_name,\n                email: email,\n                password: password\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    signIn = async (email, password) => {\n        const savedPost = await api\n            .post('/users/signin/', {\n                email: email,\n                password: password\n            })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    getUsers = async () => {\n        const posts = await api\n            .get('/users/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return posts;\n    };\n\n    updateProfile = async (updateProfileBody, id) => {\n        const formData = new FormData();\n        for (const key in updateProfileBody) {\n            formData.append(key, updateProfileBody[key]);\n        }\n        return api\n            .put(`/users/update/${id}/`, formData, { requireToken: true })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n    };\n    //////////////////////////////\n    // posts\n    /////////////////////////////\n\n    getPosts = async () => {\n        const posts = await api\n            .get('/posts/')\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return posts;\n    };\n\n    getPost = async id => {\n        return api\n            .get(`/posts/detail/${id}/`, { requireToken: true })\n            .then(response => {\n                return response.data[0];\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n    };\n\n    addPost = async (name, image) => {\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('image', image);\n        console.log('{ name, image }', { name, image });\n        const savedPost = await api\n            .post('/posts/add/', formData, { requireToken: true })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    deletePost = async id => {\n        const response = await api\n            .delete('/posts/delete/' + id + '/', { requireToken: true })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return response;\n    };\n\n    ///////////////////////////////////////////\n    //Favorite\n    //////////////////////////////////////////\n    getFavorites = async () => {\n        const favorites = await api\n            .get('/favorites/', { requireToken: true })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return favorites;\n    };\n\n    addFavorites = async addFavoriteBody => {\n        //{homeId: homeId} = {homeId}\n        const savedPost = await api\n            .post('/favorites/add/', addFavoriteBody, { requireToken: true })\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                throw new Error(error);\n            });\n        return savedPost;\n    };\n\n    deleteFavorites = id => {\n        return api.delete(`favorites/delete/${id}`, { requireToken: true });\n    };\n\n    //     ///////////////////////////////////////////\n    //     //Comment\n    //     //////////////////////////////////////////\n    //     getComments = (query = {}) => {\n    //         return api.get('/comments', { params: query, requireToken: true });\n    //     };\n\n    //     getComments = async () => {\n    //         const comments = await api\n    //             .get('/comments/')\n    //             .then(response => {\n    //                 return response.data;\n    //             })\n    //             .catch(error => {\n    //                 throw new Error(error);\n    //             });\n    //         return comments;\n    //     };\n    //     addComments = async addCommentBody => {\n    //         const savedPost = await api\n    //             .post('/comments/add/', addCommentBody, { requireToken: true })\n    //             .then(response => {\n    //                 return response.data;\n    //             })\n    //             .catch(error => {\n    //                 throw new Error(error);\n    //             });\n    //         return savedPost;\n    //     };\n    //     deleteComments = id => {\n    //         return api.delete(`comments/delete/${id}`, { requireToken: true });\n    //     };\n}\n"]},"metadata":{},"sourceType":"module"}